{"version":3,"sources":["Legend.js","Optionsfield.js","Map.js","App.js","index.js"],"names":["Legend","props","react_default","a","createElement","Fragment","className","active","name","description","stops","map","stop","i","key","style","backgroundColor","concat","toLocaleString","Optionsfield","options","option","onChange","changeState","checked","property","type","mapboxgl","workerClass","require","default","accessToken","Map","mapContainerRef","useRef","_useState","useState","_useState2","Object","slicedToArray","setActive","_useState3","_useState4","setMap","useEffect","container","current","center","zoom","on","addSource","url","addLayer","id","source","source-layer","maxzoom","layout","minzoom","paint","fill-color","line-color","line-width","setPaintProperty","e","Popup","setLngLat","lngLat","setHTML","features","properties","BROWN","toFixed","POP","Isolation","Divergence","AverageSegregation","addTo","getCanvas","cursor","remove","ref","src_Legend","src_Optionsfield","App","src_Map_0","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e6ea7c91.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Legend = (props) => {\n  const renderLegendKeys = (stop, i) => {\n    return (\n      <div key={i} className=\"txt-s\">\n        <span\n          className=\"mr6 round-full w12 h12 inline-block align-middle\"\n          style={{ backgroundColor: stop[1] }}\n        />\n        <span>{`${stop[0].toLocaleString()}`}</span>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"bg-white absolute bottom right mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n        <div className=\"mb6\">\n          <h2 className=\"txt-bold txt-s block\">{props.active.name}</h2>\n          <p className=\"txt-s color-gray\">{props.active.description}</p>\n        </div>\n        {props.stops.map(renderLegendKeys)}\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\n\nconst Optionsfield = (props) => {\n  const renderOptions = (option, i) => {\n    return (\n      <label key={i} className=\"toggle-container\">\n        <input\n          onChange={() => props.changeState(i)}\n          checked={option.property === props.property}\n          name=\"toggle\"\n          type=\"radio\"\n        />\n        <div className=\"toggle txt-s py3 toggle--active-white\">\n          {option.name}\n        </div>\n      </label>\n    );\n  };\n  return (\n    <div className=\"toggle-group absolute top left ml12 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n      {props.options.map(renderOptions)}\n    </div>\n  );\n};\n\nexport default Optionsfield;\n","import React, {useRef, useEffect, useState} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport Legend from './Legend';\nimport Optionsfield from './Optionsfield';\nimport './Map.css';\n\n// The following is required to stop \"npm build\" from transpiling mapbox code.\n// notice the exclamation point in the import.\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax, import/no-unresolved\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nmapboxgl.accessToken =\n    'pk.eyJ1IjoibnRob21hczA4MCIsImEiOiJjbDBidTZpcjQwbXc5M21taXo4bjN6ZnZxIn0.qH8lpxHafHYeNncbnAes3A';\n\nconst Map = () => {\n        const options = [\n            {\n                name: 'Isolation',\n                description: '',\n                property: 'Isolation',\n                stops: [\n                    [0, '#F2F12D'],\n                    [0.05, '#E6B71E'],\n                    [0.1, '#DA9C20'],\n                    [0.15, '#CA8323'],\n                    [0.2, '#B86B25'],\n                    [0.25, '#A25626'],\n                    [0.3, '#9a4f32'],\n                    [0.35, '#8f340f'],\n                    [0.4, '#651c00'],\n                    [0.45, '#4b1806']\n                ]\n            },\n            {\n                name: 'Divergence',\n                description: '',\n                property: 'Divergence',\n                stops: [\n                    [0, '#F2F12D'],\n                    [0.05, '#E6B71E'],\n                    [0.1, '#DA9C20'],\n                    [0.15, '#CA8323'],\n                    [0.2, '#B86B25'],\n                    [0.25, '#A25626'],\n                    [0.3, '#9a4f32'],\n                    [0.35, '#8f340f'],\n                    [0.4, '#651c00'],\n                    [0.45, '#4b1806']\n                ]\n            },\n            {\n                name: 'Composite Segregation',\n                description: '',\n                property: 'AverageSegregation',\n                stops: [\n                    [0, '#F2F12D'],\n                    [0.05, '#E6B71E'],\n                    [0.1, '#DA9C20'],\n                    [0.15, '#CA8323'],\n                    [0.2, '#B86B25'],\n                    [0.25, '#A25626'],\n                    [0.3, '#9a4f32'],\n                    [0.35, '#8f340f'],\n                    [0.4, '#651c00'],\n                    [0.45, '#4b1806']\n                ]\n            }\n        ];\n\n        const mapContainerRef = useRef(null);\n        const [active, setActive] = useState(options[0]);\n        const [map, setMap] = useState(null);\n\n// Initialize map when component mounts\n        useEffect(() => {\n            const map = new mapboxgl.Map({\n                container: mapContainerRef.current,\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: [-98, 38.88],\n                zoom: 3\n            });\n\n            map.on('load', () => {\n\n                map.addSource('tracts', {\n                    'type': 'vector',\n                    'url': 'mapbox://nthomas080.tl_2020_us_tract-FINAL'\n                });\n\n                map.addSource('counties', {\n                    'type': 'vector',\n                    'url': 'mapbox://nthomas080.b3lysq15'\n                });\n\n                map.addSource('states', {\n                    'type': 'vector',\n                    'url': 'mapbox://nthomas080.7f7so0a1'\n                });\n\n                map.addLayer(\n                    {\n                        'id': 'states',\n                        'source': 'states',\n                        'source-layer': 'tl_2020_us_state-FINAL-bffxgb',\n                        'type': 'fill',\n                        'maxzoom': 7,\n                        'layout': {}\n                    }\n                );\n\n                map.addLayer(\n                    {\n                        'id': 'counties',\n                        'source': 'counties',\n                        'source-layer': 'tl_2020_us_county-FINAL-dzo24t',\n                        'minzoom': 7,\n                        'maxzoom': 10,\n                        'type': 'fill',\n                        'layout': {}\n                    }\n                );\n\n                map.addLayer(\n                    {\n                        'id': 'tracts',\n                        'source': 'tracts',\n                        'source-layer': 'tracts-FINAL',\n                        'minzoom': 10,\n                        'type': 'fill',\n                        'layout': {},\n                        'paint': {\n                            'fill-color': [\n                                'interpolate',\n                                ['linear'],\n                                [\"/\", [\"get\", \"BROWN\"], [\"get\", \"POP\"]],\n                                0,\n                                '#F2F12D',\n                                0.055,\n                                '#EED322',\n                                0.11,\n                                '#E6B71E',\n                                0.165,\n                                '#DA9C20',\n                                0.22,\n                                '#CA8323',\n                                0.275,\n                                '#B86B25',\n                                0.33,\n                                '#A25626',\n                                0.385,\n                                '#9a4f32',\n                                0.44,\n                                '#8f340f',\n                                0.495,\n                                '#651c00',\n                                0.55,\n                                '#4b1806'\n                            ]\n                        }\n                    });\n\n                map.addLayer(\n                    {\n                        'id': 'tract-outline',\n                        'source': 'tracts',\n                        'source-layer': 'tracts-FINAL',\n                        'minzoom': 10,\n                        'type': 'line',\n                        'layout': {},\n                        'paint': {\n                            'line-color': '#000',\n                            'line-width': 0.4\n                        }\n                    }\n                );\n\n                map.addLayer(\n                    {\n                        'id': 'county-outline',\n                        'source': 'counties',\n                        'source-layer': 'tl_2020_us_county-FINAL-dzo24t',\n                        'minzoom': 7,\n                        'type': 'line',\n                        'layout': {},\n                        'paint': {\n                            'line-color': '#000',\n                            'line-width': 0.6\n                        }\n                    }\n                );\n\n                map.addLayer(\n                    {\n                        'id': 'state-outline',\n                        'source': 'states',\n                        'source-layer': 'tl_2020_us_state-FINAL-bffxgb',\n                        'type': 'line',\n                        'layout': {},\n                        'paint': {\n                            'line-color': '#000',\n                            'line-width': 1.2\n                        }\n                    }\n                );\n\n                map.setPaintProperty('states', 'fill-color', {\n                    property: active.property,\n                    stops: active.stops\n                });\n                map.setPaintProperty('counties', 'fill-color', {\n                    property: active.property,\n                    stops: active.stops\n                });\n\n                map.setPaintProperty('states', 'fill-opacity', 0.8)\n                map.setPaintProperty('counties', 'fill-opacity', 0.8)\n                map.setPaintProperty('tracts', 'fill-opacity', 0.8)\n\n                map.on('click', 'states', (e) => {\n                    new mapboxgl.Popup()\n                        .setLngLat(e.lngLat)\n                        .setHTML(\n                            `<div> \\\n                                <h1>Brown Population: ${e.features[0].properties.BROWN.toFixed(0)}</h1> \\\n                                <h1>Total Population: ${e.features[0].properties.POP.toFixed(0)}</h1> \\\n                                <h1>Isolation: ${e.features[0].properties.Isolation.toFixed(2)}</h1> \\\n                                <h1>Divergence: ${e.features[0].properties.Divergence.toFixed(2)}</h1> \\\n                                <h1>Composite Segregation: ${e.features[0].properties.AverageSegregation.toFixed(2)}</h1> \\\n                            </div>`)\n                        .addTo(map);\n                });\n\n                map.on('click', 'counties', (e) => {\n                    new mapboxgl.Popup()\n                        .setLngLat(e.lngLat)\n                        .setHTML(\n                            `<div> \\\n                                <h1>Brown Population: ${e.features[0].properties.BROWN.toFixed(0)}</h1> \\\n                                <h1>Total Population: ${e.features[0].properties.POP.toFixed(0)}</h1> \\\n                                <h1>Isolation: ${e.features[0].properties.Isolation.toFixed(2)}</h1> \\\n                                <h1>Divergence: ${e.features[0].properties.Divergence.toFixed(2)}</h1> \\\n                                <h1>Composite Segregation: ${e.features[0].properties.AverageSegregation.toFixed(2)}</h1> \\\n                            </div>`)\n                        .addTo(map);\n                });\n\n                map.on('click', 'tracts', (e) => {\n                    new mapboxgl.Popup()\n                        .setLngLat(e.lngLat)\n                        .setHTML(\n                            `<div> \\\n                                <h1>Brown Population: ${e.features[0].properties.BROWN.toFixed(0)}</h1> \\\n                                <h1>Total Population: ${e.features[0].properties.POP.toFixed(0)}</h1> \n                                </div>`)\n                        .addTo(map);\n                });\n\n                map.on('mouseenter', 'states-layer', () => {\n                    map.getCanvas().style.cursor = 'pointer';\n                });\n\n                map.on('mouseleave', 'states-layer', () => {\n                    map.getCanvas().style.cursor = '';\n                });\n\n                setMap(map);\n            });\n            // Clean up on unmount\n            return () => map.remove();\n        }, []);\n\n        useEffect(() => {\n            paint();\n        }, [active]);\n\n        const paint = () => {\n            if (map) {\n                map.setPaintProperty('states', 'fill-color', {\n                    property: active.property,\n                    stops: active.stops\n                });\n                map.setPaintProperty('counties', 'fill-color', {\n                    property: active.property,\n                    stops: active.stops\n                });\n            }\n        };\n\n        const changeState = i => {\n            setActive(options[i]);\n            map.setPaintProperty('states', 'fill-color', {\n                property: active.property,\n                stops: active.stops\n            });\n            map.setPaintProperty('counties', 'fill-color', {\n                property: active.property,\n                stops: active.stops\n            });\n        };\n\n        return (\n            <div>\n                <div ref={mapContainerRef} className='map-container'/>\n                <Legend active={active} stops={active.stops}/>\n                <Optionsfield\n                    options={options}\n                    property={active.property}\n                    changeState={changeState}\n                />\n            </div>\n        );\n    }\n;\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}